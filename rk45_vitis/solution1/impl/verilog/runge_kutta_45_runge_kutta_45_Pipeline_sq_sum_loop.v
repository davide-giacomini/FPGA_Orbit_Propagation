// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module runge_kutta_45_runge_kutta_45_Pipeline_sq_sum_loop (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        e_V_address0,
        e_V_ce0,
        e_V_q0,
        p_Val2_20_out,
        p_Val2_20_out_ap_vld,
        grp_macply_fu_993_p_din1,
        grp_macply_fu_993_p_din2,
        grp_macply_fu_993_p_din3,
        grp_macply_fu_993_p_dout0,
        grp_macply_fu_993_p_ready
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] e_V_address0;
output   e_V_ce0;
input  [176:0] e_V_q0;
output  [176:0] p_Val2_20_out;
output   p_Val2_20_out_ap_vld;
output  [176:0] grp_macply_fu_993_p_din1;
output  [176:0] grp_macply_fu_993_p_din2;
output  [176:0] grp_macply_fu_993_p_din3;
input  [176:0] grp_macply_fu_993_p_dout0;
input   grp_macply_fu_993_p_ready;

reg ap_idle;
reg e_V_ce0;
reg p_Val2_20_out_ap_vld;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln240_fu_94_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_state2;
wire    ap_block_state2_pp0_stage1_iter0;
wire  signed [176:0] sext_ln242_fu_138_p1;
wire   [63:0] zext_ln240_fu_106_p1;
reg   [2:0] i_fu_46;
wire   [2:0] add_ln240_fu_100_p2;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_i_6;
reg   [176:0] err_squared_sum_V_1_fu_50;
wire   [84:0] tmp_s_fu_120_p4;
wire   [139:0] shl_ln884_s_fu_130_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_done_reg = 1'b0;
end

runge_kutta_45_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        err_squared_sum_V_1_fu_50 <= 177'd0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        err_squared_sum_V_1_fu_50 <= grp_macply_fu_993_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        if ((icmp_ln240_fu_94_p2 == 1'd0)) begin
            i_fu_46 <= add_ln240_fu_100_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_46 <= 3'd0;
        end
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln240_fu_94_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_i_6 = 3'd0;
    end else begin
        ap_sig_allocacmp_i_6 = i_fu_46;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        e_V_ce0 = 1'b1;
    end else begin
        e_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln240_fu_94_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        p_Val2_20_out_ap_vld = 1'b1;
    end else begin
        p_Val2_20_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((icmp_ln240_fu_94_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln240_fu_100_p2 = (ap_sig_allocacmp_i_6 + 3'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign e_V_address0 = zext_ln240_fu_106_p1;

assign grp_macply_fu_993_p_din1 = err_squared_sum_V_1_fu_50;

assign grp_macply_fu_993_p_din2 = sext_ln242_fu_138_p1;

assign grp_macply_fu_993_p_din3 = sext_ln242_fu_138_p1;

assign icmp_ln240_fu_94_p2 = ((ap_sig_allocacmp_i_6 == 3'd6) ? 1'b1 : 1'b0);

assign p_Val2_20_out = err_squared_sum_V_1_fu_50;

assign sext_ln242_fu_138_p1 = $signed(shl_ln884_s_fu_130_p3);

assign shl_ln884_s_fu_130_p3 = {{tmp_s_fu_120_p4}, {55'd0}};

assign tmp_s_fu_120_p4 = {{e_V_q0[139:55]}};

assign zext_ln240_fu_106_p1 = ap_sig_allocacmp_i_6;

endmodule //runge_kutta_45_runge_kutta_45_Pipeline_sq_sum_loop
