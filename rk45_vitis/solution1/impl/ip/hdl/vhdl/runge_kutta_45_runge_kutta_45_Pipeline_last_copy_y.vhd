-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity runge_kutta_45_runge_kutta_45_Pipeline_last_copy_y is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_X_BUS_AWVALID : OUT STD_LOGIC;
    m_axi_X_BUS_AWREADY : IN STD_LOGIC;
    m_axi_X_BUS_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_X_BUS_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_X_BUS_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_X_BUS_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_X_BUS_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_X_BUS_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_X_BUS_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_X_BUS_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_X_BUS_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_X_BUS_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_X_BUS_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_X_BUS_WVALID : OUT STD_LOGIC;
    m_axi_X_BUS_WREADY : IN STD_LOGIC;
    m_axi_X_BUS_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axi_X_BUS_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_X_BUS_WLAST : OUT STD_LOGIC;
    m_axi_X_BUS_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_X_BUS_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_X_BUS_ARVALID : OUT STD_LOGIC;
    m_axi_X_BUS_ARREADY : IN STD_LOGIC;
    m_axi_X_BUS_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_X_BUS_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_X_BUS_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_X_BUS_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_X_BUS_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_X_BUS_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_X_BUS_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_X_BUS_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_X_BUS_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_X_BUS_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_X_BUS_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_X_BUS_RVALID : IN STD_LOGIC;
    m_axi_X_BUS_RREADY : OUT STD_LOGIC;
    m_axi_X_BUS_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    m_axi_X_BUS_RLAST : IN STD_LOGIC;
    m_axi_X_BUS_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_X_BUS_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_X_BUS_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_X_BUS_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_X_BUS_BVALID : IN STD_LOGIC;
    m_axi_X_BUS_BREADY : OUT STD_LOGIC;
    m_axi_X_BUS_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_X_BUS_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_X_BUS_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    mul366 : IN STD_LOGIC_VECTOR (31 downto 0);
    yy_loc_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    yy_loc_V_ce0 : OUT STD_LOGIC;
    yy_loc_V_q0 : IN STD_LOGIC_VECTOR (79 downto 0);
    yy : IN STD_LOGIC_VECTOR (63 downto 0);
    zext_ln276 : IN STD_LOGIC_VECTOR (34 downto 0);
    trunc_ln1 : IN STD_LOGIC_VECTOR (5 downto 0) );
end;


architecture behav of runge_kutta_45_runge_kutta_45_Pipeline_last_copy_y is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv80_0 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv48_FFFFFFFFFFFF : STD_LOGIC_VECTOR (47 downto 0) := "111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_FFFFFFCB : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111001011";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv7_6 : STD_LOGIC_VECTOR (6 downto 0) := "0000110";
    constant ap_const_lv80_FFFFFFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (79 downto 0) := "11111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_FFFFFFCA : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111001010";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv11_3FE : STD_LOGIC_VECTOR (10 downto 0) := "01111111110";
    constant ap_const_lv11_14 : STD_LOGIC_VECTOR (10 downto 0) := "00000010100";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv64_FFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000001111111111111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal empty_reg_740 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_io : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal empty_reg_740_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal empty_reg_740_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln276_fu_215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal X_BUS_blk_n_AW : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal X_BUS_blk_n_W : STD_LOGIC;
    signal X_BUS_blk_n_B : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal empty_fu_232_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_740_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_740_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_740_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_740_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_745 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln_reg_750 : STD_LOGIC_VECTOR (57 downto 0);
    signal shl_ln277_fu_666_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln277_reg_755 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln277_1_fu_684_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln277_1_reg_760 : STD_LOGIC_VECTOR (511 downto 0);
    signal i_5_cast83_fu_227_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln277_fu_690_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal phi_ln277_fu_138 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln276_fu_700_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal i_5_fu_142 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln276_fu_221_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_i : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_236_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal and_ln1_fu_246_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal zext_ln277_fu_254_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln277_2_fu_268_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln276_cast_fu_198_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln277_fu_274_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_10_fu_304_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_fu_312_p2 : STD_LOGIC_VECTOR (79 downto 0);
    signal tmp_V_2_fu_318_p3 : STD_LOGIC_VECTOR (79 downto 0);
    signal t_fu_326_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_336_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1267_fu_354_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_11_fu_358_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_366_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1269_fu_374_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal NZeros_fu_344_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal hitNonZero_fu_348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal NZeros_1_fu_378_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal NZeros_3_fu_384_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1095_fu_392_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_fu_398_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_404_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln1098_fu_420_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln1098_fu_424_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln1098_fu_430_p1 : STD_LOGIC_VECTOR (79 downto 0);
    signal lshr_ln1098_fu_434_p2 : STD_LOGIC_VECTOR (79 downto 0);
    signal p_Result_s_fu_440_p2 : STD_LOGIC_VECTOR (79 downto 0);
    signal icmp_ln1097_fu_414_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1098_fu_446_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_458_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_7_fu_472_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1100_fu_466_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1100_fu_480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_fu_452_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1100_fu_486_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1105_fu_506_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1105_fu_512_p1 : STD_LOGIC_VECTOR (79 downto 0);
    signal sub_ln1106_fu_522_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1106_fu_528_p1 : STD_LOGIC_VECTOR (79 downto 0);
    signal lshr_ln1105_fu_516_p2 : STD_LOGIC_VECTOR (79 downto 0);
    signal shl_ln1106_fu_532_p2 : STD_LOGIC_VECTOR (79 downto 0);
    signal icmp_ln1105_fu_500_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1106_fu_538_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1106_1_fu_542_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln_fu_492_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal m_fu_546_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1112_fu_554_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_1_fu_558_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_4_fu_564_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_8_fu_578_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1094_fu_594_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln1116_fu_598_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln1094_fu_586_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1122_fu_604_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1113_fu_574_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_610_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln1086_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_12_fu_618_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln1086_fu_630_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln1_fu_638_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal and_ln277_1_fu_646_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln277_1_fu_657_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln277_2_fu_662_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln277_2_fu_672_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln277_1_fu_653_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal zext_ln277_3_fu_680_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component runge_kutta_45_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component runge_kutta_45_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter6_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    i_5_fu_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln276_fu_215_p2 = ap_const_lv1_0))) then 
                    i_5_fu_142 <= add_ln276_fu_221_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_5_fu_142 <= ap_const_lv32_0;
                end if;
            end if; 
        end if;
    end process;

    phi_ln277_fu_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    phi_ln277_fu_138 <= ap_const_lv64_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    phi_ln277_fu_138 <= select_ln276_fu_700_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                empty_reg_740_pp0_iter1_reg <= empty_reg_740;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                empty_reg_740_pp0_iter2_reg <= empty_reg_740_pp0_iter1_reg;
                empty_reg_740_pp0_iter3_reg <= empty_reg_740_pp0_iter2_reg;
                empty_reg_740_pp0_iter4_reg <= empty_reg_740_pp0_iter3_reg;
                empty_reg_740_pp0_iter5_reg <= empty_reg_740_pp0_iter4_reg;
                empty_reg_740_pp0_iter6_reg <= empty_reg_740_pp0_iter5_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln276_fu_215_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                empty_reg_740 <= empty_fu_232_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (empty_reg_740 = ap_const_lv1_1))) then
                shl_ln277_1_reg_760 <= shl_ln277_1_fu_684_p2;
                shl_ln277_reg_755 <= shl_ln277_fu_666_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (empty_fu_232_p1 = ap_const_lv1_1) and (icmp_ln276_fu_215_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_5_reg_745 <= ap_sig_allocacmp_i(2 downto 1);
                trunc_ln_reg_750 <= add_ln277_fu_274_p2(63 downto 6);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    NZeros_1_fu_378_p2 <= std_logic_vector(unsigned(trunc_ln1269_fu_374_p1) + unsigned(NZeros_fu_344_p1));
    NZeros_3_fu_384_p3 <= 
        NZeros_1_fu_378_p2 when (hitNonZero_fu_348_p2(0) = '1') else 
        NZeros_fu_344_p1;
    NZeros_fu_344_p1 <= tmp_s_fu_336_p3(32 - 1 downto 0);

    X_BUS_blk_n_AW_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, m_axi_X_BUS_AWREADY, empty_reg_740, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (empty_reg_740 = ap_const_lv1_1))) then 
            X_BUS_blk_n_AW <= m_axi_X_BUS_AWREADY;
        else 
            X_BUS_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    X_BUS_blk_n_B_assign_proc : process(ap_enable_reg_pp0_iter7, m_axi_X_BUS_BVALID, empty_reg_740_pp0_iter6_reg, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (empty_reg_740_pp0_iter6_reg = ap_const_lv1_1))) then 
            X_BUS_blk_n_B <= m_axi_X_BUS_BVALID;
        else 
            X_BUS_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    X_BUS_blk_n_W_assign_proc : process(ap_enable_reg_pp0_iter2, m_axi_X_BUS_WREADY, empty_reg_740_pp0_iter1_reg, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (empty_reg_740_pp0_iter1_reg = ap_const_lv1_1))) then 
            X_BUS_blk_n_W <= m_axi_X_BUS_WREADY;
        else 
            X_BUS_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    a_fu_452_p2 <= (icmp_ln1098_fu_446_p2 and icmp_ln1097_fu_414_p2);
    add_ln1105_fu_506_p2 <= std_logic_vector(unsigned(sub_ln1095_fu_392_p2) + unsigned(ap_const_lv32_FFFFFFCA));
    add_ln1122_fu_604_p2 <= std_logic_vector(unsigned(sub_ln1116_fu_598_p2) + unsigned(select_ln1094_fu_586_p3));
    add_ln276_fu_221_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i) + unsigned(ap_const_lv32_1));
    add_ln277_1_fu_657_p2 <= std_logic_vector(unsigned(trunc_ln1) + unsigned(and_ln277_1_fu_646_p3));
    add_ln277_2_fu_268_p2 <= std_logic_vector(unsigned(zext_ln277_fu_254_p1) + unsigned(yy));
    add_ln277_fu_274_p2 <= std_logic_vector(unsigned(add_ln277_2_fu_268_p2) + unsigned(zext_ln276_cast_fu_198_p1));
    and_ln1100_fu_480_p2 <= (xor_ln1100_fu_466_p2 and p_Result_7_fu_472_p3);
    and_ln1_fu_246_p3 <= (tmp_4_fu_236_p4 & ap_const_lv4_0);
    and_ln277_1_fu_646_p3 <= (tmp_5_reg_745 & ap_const_lv4_0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter7, m_axi_X_BUS_BVALID, empty_reg_740_pp0_iter6_reg)
    begin
                ap_block_pp0_stage0_01001 <= ((m_axi_X_BUS_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (empty_reg_740_pp0_iter6_reg = ap_const_lv1_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter7, m_axi_X_BUS_BVALID, ap_block_state2_io, ap_block_state3_io, empty_reg_740_pp0_iter6_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((m_axi_X_BUS_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (empty_reg_740_pp0_iter6_reg = ap_const_lv1_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_io)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_io)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter7, m_axi_X_BUS_BVALID, ap_block_state2_io, ap_block_state3_io, empty_reg_740_pp0_iter6_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((m_axi_X_BUS_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (empty_reg_740_pp0_iter6_reg = ap_const_lv1_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_io)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_io)));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_io_assign_proc : process(m_axi_X_BUS_AWREADY, empty_reg_740)
    begin
                ap_block_state2_io <= ((m_axi_X_BUS_AWREADY = ap_const_logic_0) and (empty_reg_740 = ap_const_lv1_1));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_io_assign_proc : process(m_axi_X_BUS_WREADY, empty_reg_740_pp0_iter1_reg)
    begin
                ap_block_state3_io <= ((m_axi_X_BUS_WREADY = ap_const_logic_0) and (empty_reg_740_pp0_iter1_reg = ap_const_lv1_1));
    end process;

        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state8_pp0_stage0_iter7_assign_proc : process(m_axi_X_BUS_BVALID, empty_reg_740_pp0_iter6_reg)
    begin
                ap_block_state8_pp0_stage0_iter7 <= ((m_axi_X_BUS_BVALID = ap_const_logic_0) and (empty_reg_740_pp0_iter6_reg = ap_const_lv1_1));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln276_fu_215_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln276_fu_215_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter6_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter6_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_5_fu_142)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_i <= ap_const_lv32_0;
        else 
            ap_sig_allocacmp_i <= i_5_fu_142;
        end if; 
    end process;

    empty_fu_232_p1 <= ap_sig_allocacmp_i(1 - 1 downto 0);
    hitNonZero_fu_348_p2 <= "1" when (t_fu_326_p4 = ap_const_lv64_0) else "0";
    i_5_cast83_fu_227_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i),64));
    icmp_ln1086_fu_298_p2 <= "1" when (yy_loc_V_q0 = ap_const_lv80_0) else "0";
    icmp_ln1097_fu_414_p2 <= "1" when (signed(tmp_fu_404_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln1098_fu_446_p2 <= "0" when (p_Result_s_fu_440_p2 = ap_const_lv80_0) else "1";
    icmp_ln1105_fu_500_p2 <= "1" when (signed(lsb_index_fu_398_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln276_fu_215_p2 <= "1" when (ap_sig_allocacmp_i = mul366) else "0";
    lsb_index_fu_398_p2 <= std_logic_vector(unsigned(sub_ln1095_fu_392_p2) + unsigned(ap_const_lv32_FFFFFFCB));
    lshr_ln1098_fu_434_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv80_FFFFFFFFFFFFFFFFFFFF),to_integer(unsigned('0' & zext_ln1098_fu_430_p1(31-1 downto 0)))));
    lshr_ln1105_fu_516_p2 <= std_logic_vector(shift_right(unsigned(tmp_V_2_fu_318_p3),to_integer(unsigned('0' & zext_ln1105_fu_512_p1(31-1 downto 0)))));
    m_1_fu_558_p2 <= std_logic_vector(unsigned(m_fu_546_p3) + unsigned(zext_ln1112_fu_554_p1));
    m_4_fu_564_p4 <= m_1_fu_558_p2(63 downto 1);
    m_axi_X_BUS_ARADDR <= ap_const_lv64_0;
    m_axi_X_BUS_ARBURST <= ap_const_lv2_0;
    m_axi_X_BUS_ARCACHE <= ap_const_lv4_0;
    m_axi_X_BUS_ARID <= ap_const_lv1_0;
    m_axi_X_BUS_ARLEN <= ap_const_lv32_0;
    m_axi_X_BUS_ARLOCK <= ap_const_lv2_0;
    m_axi_X_BUS_ARPROT <= ap_const_lv3_0;
    m_axi_X_BUS_ARQOS <= ap_const_lv4_0;
    m_axi_X_BUS_ARREGION <= ap_const_lv4_0;
    m_axi_X_BUS_ARSIZE <= ap_const_lv3_0;
    m_axi_X_BUS_ARUSER <= ap_const_lv1_0;
    m_axi_X_BUS_ARVALID <= ap_const_logic_0;
    m_axi_X_BUS_AWADDR <= sext_ln277_fu_690_p1;
    m_axi_X_BUS_AWBURST <= ap_const_lv2_0;
    m_axi_X_BUS_AWCACHE <= ap_const_lv4_0;
    m_axi_X_BUS_AWID <= ap_const_lv1_0;
    m_axi_X_BUS_AWLEN <= ap_const_lv32_1;
    m_axi_X_BUS_AWLOCK <= ap_const_lv2_0;
    m_axi_X_BUS_AWPROT <= ap_const_lv3_0;
    m_axi_X_BUS_AWQOS <= ap_const_lv4_0;
    m_axi_X_BUS_AWREGION <= ap_const_lv4_0;
    m_axi_X_BUS_AWSIZE <= ap_const_lv3_0;
    m_axi_X_BUS_AWUSER <= ap_const_lv1_0;

    m_axi_X_BUS_AWVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, empty_reg_740, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (empty_reg_740 = ap_const_lv1_1))) then 
            m_axi_X_BUS_AWVALID <= ap_const_logic_1;
        else 
            m_axi_X_BUS_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_X_BUS_BREADY_assign_proc : process(ap_enable_reg_pp0_iter7, empty_reg_740_pp0_iter6_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (empty_reg_740_pp0_iter6_reg = ap_const_lv1_1))) then 
            m_axi_X_BUS_BREADY <= ap_const_logic_1;
        else 
            m_axi_X_BUS_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_X_BUS_RREADY <= ap_const_logic_0;
    m_axi_X_BUS_WDATA <= shl_ln277_1_reg_760;
    m_axi_X_BUS_WID <= ap_const_lv1_0;
    m_axi_X_BUS_WLAST <= ap_const_logic_0;
    m_axi_X_BUS_WSTRB <= shl_ln277_reg_755;
    m_axi_X_BUS_WUSER <= ap_const_lv1_0;

    m_axi_X_BUS_WVALID_assign_proc : process(ap_enable_reg_pp0_iter2, empty_reg_740_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (empty_reg_740_pp0_iter1_reg = ap_const_lv1_1))) then 
            m_axi_X_BUS_WVALID <= ap_const_logic_1;
        else 
            m_axi_X_BUS_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_fu_546_p3 <= 
        trunc_ln1106_fu_538_p1 when (icmp_ln1105_fu_500_p2(0) = '1') else 
        trunc_ln1106_1_fu_542_p1;
    or_ln1100_fu_486_p2 <= (and_ln1100_fu_480_p2 or a_fu_452_p2);
    or_ln1_fu_638_p3 <= (select_ln1086_fu_630_p3 & phi_ln277_fu_138);
    or_ln_fu_492_p3 <= (ap_const_lv1_0 & or_ln1100_fu_486_p2);
    p_Result_10_fu_304_p3 <= yy_loc_V_q0(79 downto 79);
    p_Result_11_fu_358_p3 <= (trunc_ln1267_fu_354_p1 & ap_const_lv48_FFFFFFFFFFFF);
    p_Result_12_fu_618_p5 <= (tmp_2_fu_610_p3 & zext_ln1113_fu_574_p1(51 downto 0));
    p_Result_7_fu_472_p3 <= tmp_V_2_fu_318_p3(to_integer(unsigned(lsb_index_fu_398_p2)) downto to_integer(unsigned(lsb_index_fu_398_p2))) when (to_integer(unsigned(lsb_index_fu_398_p2)) >= 0 and to_integer(unsigned(lsb_index_fu_398_p2)) <=79) else "-";
    p_Result_8_fu_578_p3 <= m_1_fu_558_p2(54 downto 54);
    p_Result_s_fu_440_p2 <= (tmp_V_2_fu_318_p3 and lshr_ln1098_fu_434_p2);
    select_ln1086_fu_630_p3 <= 
        ap_const_lv64_0 when (icmp_ln1086_fu_298_p2(0) = '1') else 
        p_Result_12_fu_618_p5;
    select_ln1094_fu_586_p3 <= 
        ap_const_lv11_3FF when (p_Result_8_fu_578_p3(0) = '1') else 
        ap_const_lv11_3FE;
    select_ln276_fu_700_p3 <= 
        ap_const_lv64_0 when (empty_reg_740(0) = '1') else 
        select_ln1086_fu_630_p3;
        sext_ln277_fu_690_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_reg_750),64));

    shl_ln1106_fu_532_p2 <= std_logic_vector(shift_left(unsigned(tmp_V_2_fu_318_p3),to_integer(unsigned('0' & zext_ln1106_fu_528_p1(31-1 downto 0)))));
    shl_ln277_1_fu_684_p2 <= std_logic_vector(shift_left(unsigned(zext_ln277_1_fu_653_p1),to_integer(unsigned('0' & zext_ln277_3_fu_680_p1(31-1 downto 0)))));
    shl_ln277_2_fu_672_p3 <= (add_ln277_1_fu_657_p2 & ap_const_lv3_0);
    shl_ln277_fu_666_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_FFFF),to_integer(unsigned('0' & zext_ln277_2_fu_662_p1(31-1 downto 0)))));
    sub_ln1095_fu_392_p2 <= std_logic_vector(unsigned(ap_const_lv32_50) - unsigned(NZeros_3_fu_384_p3));
    sub_ln1098_fu_424_p2 <= std_logic_vector(unsigned(ap_const_lv7_6) - unsigned(trunc_ln1098_fu_420_p1));
    sub_ln1106_fu_522_p2 <= std_logic_vector(unsigned(ap_const_lv32_36) - unsigned(sub_ln1095_fu_392_p2));
    sub_ln1116_fu_598_p2 <= std_logic_vector(unsigned(ap_const_lv11_14) - unsigned(trunc_ln1094_fu_594_p1));
    t_fu_326_p4 <= tmp_V_2_fu_318_p3(79 downto 16);
    tmp_1_fu_458_p3 <= lsb_index_fu_398_p2(31 downto 31);
    tmp_2_fu_610_p3 <= (p_Result_10_fu_304_p3 & add_ln1122_fu_604_p2);
    
    tmp_3_fu_366_p3_proc : process(p_Result_11_fu_358_p3)
    begin
        tmp_3_fu_366_p3 <= std_logic_vector(to_unsigned(64, 64));
        for i in 64 - 1 downto 0 loop
            if p_Result_11_fu_358_p3(i) = '1' then
                tmp_3_fu_366_p3 <= std_logic_vector(to_unsigned(64-1-i,64));
                exit;
            end if;
        end loop;
    end process;

    tmp_4_fu_236_p4 <= ap_sig_allocacmp_i(31 downto 1);
    tmp_V_2_fu_318_p3 <= 
        tmp_V_fu_312_p2 when (p_Result_10_fu_304_p3(0) = '1') else 
        yy_loc_V_q0;
    tmp_V_fu_312_p2 <= std_logic_vector(unsigned(ap_const_lv80_0) - unsigned(yy_loc_V_q0));
    tmp_fu_404_p4 <= lsb_index_fu_398_p2(31 downto 1);
    
    tmp_s_fu_336_p3_proc : process(t_fu_326_p4)
    begin
        tmp_s_fu_336_p3 <= std_logic_vector(to_unsigned(64, 64));
        for i in 64 - 1 downto 0 loop
            if t_fu_326_p4(i) = '1' then
                tmp_s_fu_336_p3 <= std_logic_vector(to_unsigned(64-1-i,64));
                exit;
            end if;
        end loop;
    end process;

    trunc_ln1094_fu_594_p1 <= NZeros_3_fu_384_p3(11 - 1 downto 0);
    trunc_ln1098_fu_420_p1 <= sub_ln1095_fu_392_p2(7 - 1 downto 0);
    trunc_ln1106_1_fu_542_p1 <= shl_ln1106_fu_532_p2(64 - 1 downto 0);
    trunc_ln1106_fu_538_p1 <= lshr_ln1105_fu_516_p2(64 - 1 downto 0);
    trunc_ln1267_fu_354_p1 <= tmp_V_2_fu_318_p3(16 - 1 downto 0);
    trunc_ln1269_fu_374_p1 <= tmp_3_fu_366_p3(32 - 1 downto 0);
    xor_ln1100_fu_466_p2 <= (tmp_1_fu_458_p3 xor ap_const_lv1_1);
    yy_loc_V_address0 <= i_5_cast83_fu_227_p1(14 - 1 downto 0);

    yy_loc_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            yy_loc_V_ce0 <= ap_const_logic_1;
        else 
            yy_loc_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln1098_fu_430_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln1098_fu_424_p2),80));
    zext_ln1105_fu_512_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1105_fu_506_p2),80));
    zext_ln1106_fu_528_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln1106_fu_522_p2),80));
    zext_ln1112_fu_554_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_fu_492_p3),64));
    zext_ln1113_fu_574_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_4_fu_564_p4),64));
    zext_ln276_cast_fu_198_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln276),64));
    zext_ln277_1_fu_653_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln1_fu_638_p3),512));
    zext_ln277_2_fu_662_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln277_1_fu_657_p2),64));
    zext_ln277_3_fu_680_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln277_2_fu_672_p3),512));
    zext_ln277_fu_254_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln1_fu_246_p3),64));
end behav;
