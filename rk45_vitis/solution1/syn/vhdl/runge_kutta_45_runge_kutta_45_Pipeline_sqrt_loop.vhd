-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity runge_kutta_45_runge_kutta_45_Pipeline_sqrt_loop is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    X_V_7_reload : IN STD_LOGIC_VECTOR (201 downto 0);
    Q_V_5_out : OUT STD_LOGIC_VECTOR (100 downto 0);
    Q_V_5_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of runge_kutta_45_runge_kutta_45_Pipeline_sqrt_loop is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv101_0 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv200_lc_1 : STD_LOGIC_VECTOR (199 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv7_65 : STD_LOGIC_VECTOR (6 downto 0) := "1100101";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_C8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001000";
    constant ap_const_lv32_C9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001001";
    constant ap_const_lv202_lc_3 : STD_LOGIC_VECTOR (201 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv101_1 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln85_fu_112_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal p_Repl2_s_fu_60 : STD_LOGIC_VECTOR (100 downto 0);
    signal Q_V_3_fu_205_p3 : STD_LOGIC_VECTOR (100 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal p_Val2_s_fu_64 : STD_LOGIC_VECTOR (201 downto 0);
    signal X_V_fu_151_p2 : STD_LOGIC_VECTOR (201 downto 0);
    signal A_V_fu_68 : STD_LOGIC_VECTOR (199 downto 0);
    signal A_V_6_fu_229_p3 : STD_LOGIC_VECTOR (199 downto 0);
    signal i_fu_72 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_4_fu_118_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_s_fu_133_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln312_fu_157_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal i_op_assign_fu_161_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_5_fu_143_p3 : STD_LOGIC_VECTOR (201 downto 0);
    signal zext_ln75_fu_169_p1 : STD_LOGIC_VECTOR (201 downto 0);
    signal T_V_fu_173_p2 : STD_LOGIC_VECTOR (201 downto 0);
    signal trunc_ln1027_fu_179_p1 : STD_LOGIC_VECTOR (99 downto 0);
    signal p_Result_s_fu_189_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal Q_V_4_fu_183_p2 : STD_LOGIC_VECTOR (100 downto 0);
    signal p_Result_6_fu_197_p3 : STD_LOGIC_VECTOR (100 downto 0);
    signal trunc_ln642_fu_213_p1 : STD_LOGIC_VECTOR (197 downto 0);
    signal tmp_1_fu_217_p3 : STD_LOGIC_VECTOR (199 downto 0);
    signal trunc_ln642_2_fu_225_p1 : STD_LOGIC_VECTOR (199 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component runge_kutta_45_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component runge_kutta_45_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    A_V_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    A_V_fu_68 <= ap_const_lv200_lc_1;
                elsif (((icmp_ln85_fu_112_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    A_V_fu_68 <= A_V_6_fu_229_p3;
                end if;
            end if; 
        end if;
    end process;

    i_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_72 <= ap_const_lv7_0;
                elsif (((icmp_ln85_fu_112_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    i_fu_72 <= i_4_fu_118_p2;
                end if;
            end if; 
        end if;
    end process;

    p_Repl2_s_fu_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    p_Repl2_s_fu_60 <= ap_const_lv101_0;
                elsif (((icmp_ln85_fu_112_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    p_Repl2_s_fu_60 <= Q_V_3_fu_205_p3;
                end if;
            end if; 
        end if;
    end process;

    p_Val2_s_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    p_Val2_s_fu_64 <= X_V_7_reload;
                elsif (((icmp_ln85_fu_112_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    p_Val2_s_fu_64 <= X_V_fu_151_p2;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    A_V_6_fu_229_p3 <= 
        tmp_1_fu_217_p3 when (p_Result_s_fu_189_p3(0) = '1') else 
        trunc_ln642_2_fu_225_p1;
    Q_V_3_fu_205_p3 <= 
        Q_V_4_fu_183_p2 when (p_Result_s_fu_189_p3(0) = '1') else 
        p_Result_6_fu_197_p3;
    Q_V_4_fu_183_p2 <= std_logic_vector(shift_left(unsigned(p_Repl2_s_fu_60),to_integer(unsigned('0' & ap_const_lv101_1(31-1 downto 0)))));
    Q_V_5_out <= p_Repl2_s_fu_60;

    Q_V_5_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln85_fu_112_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln85_fu_112_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            Q_V_5_out_ap_vld <= ap_const_logic_1;
        else 
            Q_V_5_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    T_V_fu_173_p2 <= std_logic_vector(unsigned(p_Result_5_fu_143_p3) - unsigned(zext_ln75_fu_169_p1));
    X_V_fu_151_p2 <= std_logic_vector(shift_left(unsigned(p_Val2_s_fu_64),to_integer(unsigned('0' & ap_const_lv202_lc_3(31-1 downto 0)))));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln85_fu_112_p2)
    begin
        if (((icmp_ln85_fu_112_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    i_4_fu_118_p2 <= std_logic_vector(unsigned(i_fu_72) + unsigned(ap_const_lv7_1));
    i_op_assign_fu_161_p3 <= (trunc_ln312_fu_157_p1 & ap_const_lv2_1);
    icmp_ln85_fu_112_p2 <= "1" when (i_fu_72 = ap_const_lv7_65) else "0";
    p_Result_5_fu_143_p3 <= (A_V_fu_68 & tmp_s_fu_133_p4);
    p_Result_6_fu_197_p3 <= (trunc_ln1027_fu_179_p1 & ap_const_lv1_1);
    p_Result_s_fu_189_p3 <= T_V_fu_173_p2(201 downto 201);
    tmp_1_fu_217_p3 <= (trunc_ln642_fu_213_p1 & tmp_s_fu_133_p4);
    tmp_s_fu_133_p4 <= p_Val2_s_fu_64(201 downto 200);
    trunc_ln1027_fu_179_p1 <= p_Repl2_s_fu_60(100 - 1 downto 0);
    trunc_ln312_fu_157_p1 <= p_Repl2_s_fu_60(62 - 1 downto 0);
    trunc_ln642_2_fu_225_p1 <= T_V_fu_173_p2(200 - 1 downto 0);
    trunc_ln642_fu_213_p1 <= A_V_fu_68(198 - 1 downto 0);
    zext_ln75_fu_169_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_fu_161_p3),202));
end behav;
